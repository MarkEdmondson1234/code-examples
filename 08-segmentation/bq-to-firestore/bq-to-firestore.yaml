# iam roles: 
#  - bq job user
#  - bq data owner
#  - cloud datastore user
#  - logging admin
# workflows-bq-firestore@learning-ga4.iam.gserviceaccount.com
main:
    params: [args]
    steps:
    - init_fs_writes:
        assign:
            - fs_writes: []
            - page: ${args.page}
            - schema_names: ${args.schema_names} 
            - projectId: ${args.projectId} 
            - collection: ${args.collection} 
            - fs_key: ${args.fs_key}
    - processPage:
        for:
          value: row
          in: ${page.rows}
          steps:
            - parse_data:
                call: map_bq_result
                args:
                    row: ${row}
                    names: ${schema_names}
                result: bq_map
            - list_to_dict:
                  call: list_to_dict
                  args:
                    a_list: ${bq_map}
                  result: bq_dict            
            - assign_row_values:
                assign: 
                    - fs_key_value: ${map.get(bq_dict, fs_key)}
                    - document_id: ${fs_key_value.stringValue}
                    - name: ${"projects/"+projectId+"/databases/(default)/documents/"+collection+"/"+document_id}
                    - document: {update: {fields: '${bq_dict}', name: '${name}'}}
                    - fs_writes: ${list.concat(fs_writes, document)}
    - log_fs_writes:
        call: sys.log
        args:
            data: ${fs_writes}
    - batch_write_to_firestore:
        call: googleapis.firestore.v1.projects.databases.documents.batchWrite
        args:
            database: ${"projects/"+projectId+"/databases/(default)"}
            body:
                writes: ${fs_writes}
        result: write_result

map_bq_result:
    params: [row, names]
    steps:
        - init_cell_list:
            assign:
                - cell_list: []
        - processRow: 
        # TODO: map different types to BigQuery schema
        # https://cloud.google.com/firestore/docs/reference/rest/Shared.Types/ArrayValue#Value
            for:
                value: cell
                in: ${row.f}
                index: i
                steps:
                - map_cell:
                    assign: 
                    - name: ${names[i]}
                    - value: ${default(cell.v, "")}
                    - cell: {"${name}" : { "stringValue": '${value}'}}
                    - cell_list: ${list.concat(cell_list, cell)}
        - returnRowList:
            return: ${cell_list}

list_to_dict:
    params: [a_list]
    steps:
      - init_dict: 
          assign:
            - the_dict: {}
      - loop_list:
          for:
              value: entry
              in: ${a_list}
              steps:
              - map_entry:
                  assign:
                  - the_name: ${keys(entry)[0]}
                  - the_value: ${entry[the_name]}
                  - the_dict[the_name]: ${the_value}   
      - return_dict:
          return: ${the_dict}
